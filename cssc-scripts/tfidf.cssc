#using System.Collections.Generic;

#function
    class TFIDFDictionary
    {
        public Dictionary<string, double> tf = new Dictionary<string, double>();
        public Dictionary<string, double> idf = new Dictionary<string, double>();

        public void ClearTF()
        {
            foreach (string s in idf.Keys)
                tf[s] = 0;
        }

        public void ClearIDF()
        {
            foreach (string s in tf.Keys)
                idf[s] = 0;
        }

        public TFIDFDictionary(string[] dict)
        {
            foreach (string s in dict)
            {
                if (tf.ContainsKey(s)) continue;
                tf.Add(s, 0);
                idf.Add(s, 0);
            }
        }

        public TFIDFDictionary(Dictionary<string, int> dict)
        {
            foreach (string s in dict.Keys)
            {
                tf.Add(s, 0);
                idf.Add(s, 0);
            }
        }

        public Dictionary<string, double> CalcTFIDF(string doc)
        {
            int wc = 0;
            this.ClearTF();
            string[] words = doc.Split(new char[] { ' ', '\t' });
            foreach (string word in words)
            {
                if (!tf.ContainsKey(word)) continue;
                wc++; tf[word]++;
            }

            foreach(string word in idf.Keys)
                tf[word] = tf[word] / wc * idf[word];

            return tf;
        }

        public Dictionary<string, double> CalcTF(string doc)
        {
            int wc = 0;
            this.ClearTF();
            string[] words = doc.Split(new char[] { ' ', '\t' });
            foreach (string word in words)
            {
                if (!tf.ContainsKey(word)) continue;
                wc++; tf[word]++;
            }
            return tf;
        }

        public Dictionary<string, double> CalcIDF(string[] docs)
        {
            ClearIDF();
            double logDocCount = Math.Log(docs.Length);

            Dictionary<string, Boolean> dictc = new Dictionary<string, Boolean>();
            foreach(string word in tf.Keys)
                dictc.Add(word, false);

            foreach (string doc in docs)
            {
                string[] words = doc.Split(new char[] { ' ', '\t' });
                
                foreach (string word in tf.Keys)
                    dictc[word] = false;

                foreach (string word in words)
                {
                    if (!tf.ContainsKey(word) || dictc[word]) continue;
                    idf[word]++; dictc[word] = true;
                }
            }

            foreach (string word in tf.Keys)
            {
                idf[word] = logDocCount - Math.Log(idf[word]);
            }

            return idf;
        }
    }
#endfunction

if (args.Length < 2)
{
	Console.WriteLine("Usage: tfidf <dict> <input> <output> [tf]\r\n       tfidf <input> <output dict> [tf]");
	return;
}
string[] dict, docs = new string[0];
if (args.Length == 2) {
//	docs = System.IO.File.ReadAllLines(args[0], EncodingType.GetType(args[0]));
	string doc = File.ReadAllText(args[0], EncodingType.GetType(args[0]));
	Dictionary<string, int> mydict = new Dictionary<string, int>();

	//foreach (string doc in docs)
	{
		string[] words = doc.Split(new char[] { ' ', '\t', '\r', '\n' });

		foreach(string word in words) {
			if (!mydict.ContainsKey(word))
				mydict.Add(word, 1);
		}
	}

	TFIDFDictionary idf = new TFIDFDictionary(mydict);
	//idf.CalcIDF(docs);

	using (System.IO.StreamWriter sw = new System.IO.StreamWriter(args[1]))
	{
		foreach (string s in idf.idf.Keys)
		{
			sw.WriteLine("{0}\t{1}", s, idf.idf[s]);
		}
	}

	return;
}

if (args.Length == 3 && args[2] == "tf") {
	string doc = System.IO.File.ReadAllText(args[0], EncodingType.GetType(args[0]));
	string[] words = doc.Split(new char[] { ' ', '\t' });

	Dictionary<string, int> mydict = new Dictionary<string, int>();                
	foreach (string wordOrig in words)
	{
		string word = wordOrig.Trim();
		if (!mydict.ContainsKey(word))
			mydict.Add(word, 1);
		else mydict[word]++;
	}

	using (System.IO.StreamWriter sw = new System.IO.StreamWriter(args[1]))
	{
		foreach (string s in mydict.Keys)
		{
			sw.WriteLine("{0}\t{1}", s, mydict[s]);
		}
	}

	return;
}

bool tfonly = false;
if (args.Length > 3)
{
	tfonly = args[3] == "tf";
}

dict = System.IO.File.ReadAllLines(args[0], EncodingType.GetType(args[0]));
for (int i = 0; i < dict.Length; ++i)
{
	if (dict[i].IndexOf('\t') > 0) dict[i] = dict[i].Substring(0, dict[i].IndexOf('\t'));
	if (dict[i].IndexOf(' ') > 0) dict[i] = dict[i].Substring(0, dict[i].IndexOf(' '));
}

TFIDFDictionary tfidf = new TFIDFDictionary(dict);
if (!tfonly) tfidf.CalcIDF(docs);

int doccount = 0;
using (System.IO.StreamWriter sw = new System.IO.StreamWriter(args[2]))
{
	StreamReader sr = new StreamReader(args[1], EncodingType.GetType(args[1]));
	string doc = "";
	while ((doc = sr.ReadLine()) != null)
	{
		Console.WriteLine("Doc #" + (++doccount) + " Length " + doc.Length);
		Dictionary<string, double> ti = null;
		if (!tfonly)
			ti = tfidf.CalcTFIDF(doc);
		else 
			ti = tfidf.CalcTF(doc);

		double[] hi = new double[ti.Values.Count];
		ti.Values.CopyTo(hi, 0);

		sw.Write(hi[0].ToString("#0.0000"));
		for (int i = 1; i < hi.Length; ++i)
			sw.Write(",{0:N4}", hi[i]);

		sw.WriteLine();
	}
}
